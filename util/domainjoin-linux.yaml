---
- name: Join Linux machine to a domain
  hosts: "{{ host }}"
  become: yes
  vars_files:
    - vault.yml  # Include the encrypted Vault file
  tasks:
    - name: Install required packages using yum
      when: ansible_pkg_mgr == 'yum'
      yum:
        name:
          - sssd
          - realmd
          - oddjob
          - oddjob-mkhomedir
          - adcli
          - samba-common
          - samba-common-tools
          - krb5-workstation
        state: present

    - name: Install required packages using apt
      when: ansible_pkg_mgr == 'apt'
      apt:
        name:
          - sssd
          - realmd
          - oddjob
          - oddjob-mkhomedir
          - adcli
          - samba-common
          - samba-common-bin
          - krb5-user
        state: present

    - name: Install required packages using dnf
      when: ansible_pkg_mgr == 'dnf'
      dnf:
        name:
          - sssd
          - realmd
          - oddjob
          - oddjob-mkhomedir
          - adcli
          - samba-common
          - samba-common-tools
          - krb5-workstation
        state: present

    - name: Ensure firewalld is running and enabled
      service:
        name: firewalld
        state: started
        enabled: yes

    - name: Ensure realmd service is running
      service:
        name: realmd
        state: started
        enabled: yes

    - name: Discover the domain
      command: realm discover {{ domain }}
      register: realm_discover

    - name: Join the machine to the domain
      expect:
        command: realm join --user={{ domain_user }} {{ domain }}
        responses:
          Password for {{ domain_user }}: "{{ domain_password }}"
      when: "'configured' in realm_discover.stdout"

    - name: Configure SSSD to not use FQDNs
      lineinfile:
        path: /etc/sssd/sssd.conf
        regexp: '^use_fully_qualified_names ='
        line: 'use_fully_qualified_names = false'
        create: yes

    - name: Restart SSSD
      service:
        name: sssd
        state: restarted

    - name: Test domain user and send debug information
      command: id {{ domain_user }}
      register: user_info

    - name: Debug output
      debug:
        msg: "{{ user_info.stdout }}"
